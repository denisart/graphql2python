.. graphql2python documentation master file, created by
   sphinx-quickstart on Tue Dec  6 15:53:57 2022.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

Welcome to graphql2python's documentation!
===================================

.. image:: https://img.shields.io/github/workflow/status/denisart/graphql2python/Code%20checking
  :alt: Build
.. image:: https://img.shields.io/github/v/tag/denisart/graphql2python
  :alt: tag
.. image:: https://img.shields.io/github/last-commit/denisart/graphql2python/master
  :alt: last-commit
.. image:: https://img.shields.io/github/license/denisart/graphql2python
  :alt: license

**graphql2python** is a tool for GraphQL client in python:

- A simple GraphQL client;
- Auto generated pydantic classes from a GraphQL schema;
- Auto generated GraphQL queries;
- e.t.c

Documentation for version:  |version|

Contents
--------

.. toctree::

   usage

Simple Example
--------------

For generation model we create the config file

.. code-block:: yaml

  # graphql2python.yaml
  schema: ./schema.graphql
  output: ./model.py

and run the command

.. code-block:: console

  (.venv) $ graphql2python render --config ./graphql2python.yaml

where

.. code-block:: graphql

  # schema.graphql
  interface Character {
    id: ID!
    name: String!
    friends: [Character]
    appearsIn: [Episode]!
  }

  type Human implements Character {
    id: ID!
    name: String!
    friends: [Character]
    appearsIn: [Episode]!
    starships: [Starship]
    totalCredits: Int
  }

  type Starship {
    id: ID!
    name: String!
    length: Float
  }

  type Droid implements Character {
    id: ID!
    name: String!
    friends: [Character]
    appearsIn: [Episode]!
    primaryFunction: String
  }

  enum Episode {
    NEWHOPE
    EMPIRE
    JEDI
  }

then we have the following output file:

.. code-block:: python

  """Auto-generated by graphql2python."""

  # pylint: disable-all
  # mypy: ignore-errors

  import enum
  import typing as _t
  from datetime import date, datetime

  from pydantic import BaseModel, Field

  __all__ = [
      "GraphQLBaseModel",
      # scalars
      "Boolean",
      "Float",
      "ID",
      "Int",
      "String",
      # enums
      "Episode",
      # unions
      # interfaces
      "Character",
      # objects
      "Droid",
      "Human",
      "Starship",
  ]


  class GraphQLBaseModel(BaseModel):
      """Base Model for GraphQL object."""

      class Config:
          allow_population_by_field_name = True
          json_encoders = {
              # custom output conversion for datetime
              datetime: lambda dt: dt.isoformat()
          }
          smart_union = True


  # The `Boolean` scalar type represents `true` or `false`.
  Boolean = str


  # The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE
  # 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
  Float = str


  # The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID
  # type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an
  # input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
  ID = str


  # The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31)
  # and 2^31 - 1.
  Int = str


  # The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most
  # often used by GraphQL to represent free-form human-readable text.
  String = str


  class Episode(enum.Enum):
      """
      An Enum type
      See https://graphql.org/learn/schema/#enumeration-types
      """
      EMPIRE = "EMPIRE"
      JEDI = "JEDI"
      NEWHOPE = "NEWHOPE"


  class Character(GraphQLBaseModel):
      """
      An Interface type
      See https://graphql.org/learn/schema/#interfaces
      """
      appearsIn: _t.List[_t.Optional['Episode']]
      id: 'ID'
      name: 'String'
      friends: _t.Optional[_t.List[_t.Optional['Character']]] = Field(default_factory=list)


  class Droid(
      Character,
  ):
      """
      An Object type
      See https://graphql.org/learn/schema/#object-types-and-fields
      """
      primaryFunction: _t.Optional['String'] = Field(default=None)


  class Human(
      Character,
  ):
      """
      An Object type
      See https://graphql.org/learn/schema/#object-types-and-fields
      """
      starships: _t.Optional[_t.List[_t.Optional['Starship']]] = Field(default_factory=list)
      totalCredits: _t.Optional['Int'] = Field(default=None)


  class Starship(GraphQLBaseModel):
      """
      An Object type
      See https://graphql.org/learn/schema/#object-types-and-fields
      """
      id: 'ID'
      name: 'String'
      length: _t.Optional['Float'] = Field(default=None)


  Character.update_forward_refs()
  Droid.update_forward_refs()
  Human.update_forward_refs()
  Starship.update_forward_refs()
